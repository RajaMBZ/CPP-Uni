//input/output library
#include <iostream>
//for file handling
#include <fstream>
//to use extensive string related functions
#include <string>
#include <stdio.h>


using namespace std;

//to create the linked list with single string of data
class node{
public:
    string data;
    node* next;
};

//creating linked list of single string of data
class linkedList{
public:
linkedList(){}

node *first = NULL;
node *last = NULL;

//checking if linked list is empty

bool isEmpty(){
	return first==NULL;
}

//to add a string to the linked list
void addNode(string n){
    node *tmp = new node;
    tmp->data = n;
    tmp->next = NULL;

    if(isEmpty())
    {
        first = tmp;
        last = tmp;
    }
    else
    {
        last->next = tmp;
        last = last->next;
    }
}

//to count the total nodes of the linked list
int countNodes(){

    int counterOfNodes = 0;

    node* current = first;
    while (current != NULL)
    {
        counterOfNodes++;
        current = current->next;
    }
    return counterOfNodes;
}

//to get the boolean result of search of a specific string
bool searching(string x)
{

    node* current = new node();
    current = first;

    while (current != NULL)
    {
        if (current->data == x)
            return true;
        current = current->next;
    }
    return false;
}

//printer function to test the run
void printer () {

    node* current = new node();
    current = first;
    cout<<endl;
    while (current != NULL)
    {
        cout<<current->data<<endl;
        current = current->next;
    }

}

//end of linkedList class with single strings
};

//start of linkedListTwo class with double strings
/*
class nodetwo{ 
public:
    string data1[2];
    nodetwo *next;
};

class linkedListTwo{
public:
    nodetwo *head ,*tail;
    linkedListTwo()
    {
      head=NULL;
      tail=NULL;
    }
    
    void NewNode(string value1, string value2){
        nodetwo *temp = new nodetwo();
        temp->data1[0] = value1;
        temp->data1[1] = value2;
        temp->next=NULL;
        if (head == NULL){
            head = temp;
            temp = NULL;
        }
        else
      { 
        tail->next=temp;
        tail=temp;
      }
    }
    
    
    int counter(){
        int count = 0;
        nodetwo *current=new nodetwo;
        current = head;
        while(current!=NULL){
            count++;
            current = current->next;
        }
        return count;
    }
    

    void insert_At_Front(string value1, string value2)
  {
    nodetwo *temp=new nodetwo;
    temp->data1[0]=value1;
    temp->data1[1]=value2;
    temp->next=head;
    head=temp;
  }    
    
    void Print(){
        nodetwo *current = new nodetwo();
        current = head;
            while(current!=NULL){
                cout<<current->data1[0]<<"  ";
                cout<<current->data1[1]<<"  ";
                current = current->next;
            }
            cout<<"\n";
    }
};*/

//creation of author class
class Author{
public:

Author(){}

string name;

linkedList* publishYear = new linkedList();

linkedList* journalName = new linkedList();

linkedList* numberOfArticles = new linkedList();

int countTotalArticles = 0, countArticlesByYear[2], numberOfCoauthors[2], yearsOfArticlesInIntegers;

string total[2];

/*int convertYearsToIntegers(string yearsOfArticles){

if (yearsOfArticles.size() > 6)   {
    string part1, part2;

}
}
*/

};

class Article{
public:

string identifier, title, journal, month, year, publisher;

linkedList* authorList = new linkedList();

//adding an author to the linkedList of authors of this article

void printAll() {

    linkedList* current = authorList;

    // Initialize current
    current = authorList;

    while (current->first != NULL)
    {
        cout<<current->first->data<<endl;
        current->first = current->first->next;
    }
}

//Adding an author to the linkedList of authors of this publication
void addAuthor(string s1, string s2)   {

string s3 = s1+s2;

s3.erase(s3.begin());

s3.pop_back();

if(s3[0] == ' '){ s3.erase(0, 1); }
if(s3[s3.length()-1] == ' '){ s3.erase(s3.length()-1, s3.length()); }

authorList->addNode(s3);

}

void setIdentifier(string s)  {

identifier = s;

}

void setTitle(string s)  {

s.erase(s.begin());
s.erase(s.begin());
s.erase(s.begin());
s.pop_back();
s.pop_back();
s.pop_back();
s.pop_back();
s.pop_back();
s.pop_back();
title = s;

}

void setJournal(string s)  {
s.pop_back();
s.pop_back();
s.pop_back();
s.pop_back();
journal = s;

}

void setMonth(string s)  {

s.erase(s.begin());
s.pop_back();

month = s;

}

void setYear(string s)  {

s.erase(s.begin());
s.pop_back();

year = s;

}

void setPublisher(string s) {
publisher = s;

}

};

int getNumberOfArticlesByAuthor(Author* au, int totalNumber)   {

    cout<<"Enter the name of the author without any spaces and commas (such as Guizani Mohsen):"<<endl;

    std::string st;

    cin.ignore();

    std::getline(std::cin, st);

    for(int x = 0; x<totalNumber; ++x){

        if (au[x].name == st){
            return au[x].countTotalArticles;
        }
    }
    return 0;
}

void searchByIdentifier(Article *a, string ID){

    for(int xyz = 1; xyz<=50; ++xyz){
        if(a[xyz-1].identifier==ID){
            cout<<"----------------------------------------"<<endl;
            cout<<"Found it! "<<endl;
            cout<<"Published in the month: "<<a[xyz-1].month<<endl;
            cout<<"In the journal: "<<a[xyz-1].journal<<endl;
            cout<<"In the year: "<<a[xyz-1].year<<endl;
            cout<<"With the title: "<<a[xyz-1].title<<endl;
            cout<<"It has the authors:\n\n";
            a[xyz-1].printAll();
            cout<<"----------------------------------------"<<endl;
        }
    }
}

void viewAllAuthors (Article *a){
    for(int xyz = 1; xyz<=50; ++xyz){
        cout<<endl<<"Article No: "<<xyz<<endl;
        a[xyz-1].printAll();
    }
}

bool searchAlreadyIn (int y, Author *a, string x) {

    for(int xyz = 0; xyz<y; ++xyz){

        if (a[xyz].name == x)   {
                return true;
        }
    }
    return false;
}

int countTotalAuthors (Article *a)  {

    linkedList* l = new linkedList();
    linkedList* m = new linkedList();
    node* n = new node();

    for(int xyz = 1; xyz<=50; ++xyz){

        n = a[xyz-1].authorList->first;

        m = a[xyz-1].authorList;

        while (m->first != NULL){

            if ((l->searching(m->first->data)) == false)   {
                l->addNode(m->first->data);
            }
            m->first = m->first->next;
        }
        a[xyz-1].authorList->first = n;
    }

    int counter = 0;
    node* current = l->first; // Initialize current
    while (current != NULL)
    {
        counter++;
        current = current->next;
    }
    return counter;
}

linkedList* getAllAuthors (Article *a)  {

    linkedList* l = new linkedList();
    linkedList* m = new linkedList();
    node* n = new node();

    for(int xyz = 1; xyz<=50; ++xyz){

        n = a[xyz-1].authorList->first;

        m = a[xyz-1].authorList;

        while (m->first != NULL){

            if ((l->searching(m->first->data)) == false)   {
                l->addNode(m->first->data);
            }
            m->first = m->first->next;
        }
        a[xyz-1].authorList->first = n;
    }
    return l;
}

int main () {

    linkedList* l = new linkedList();

    string line, fileName, forTitle;

    cout<<"Enter the directory of the BibtexFileCSV file: (like C:\\Users\\Raja\\Downloads\\BibtexFileCSV.csv)\n\n";

    cin>>fileName;

    //fileName = "C:\\Users\\Raja\\Downloads\\BibtexFileCSV.csv";

    ifstream myfile (fileName);

    Article *article = new Article[50];

    int ab = 0;

    string authorLine1, authorLine2;

    getline(myfile, line);

    for(int ab = 1; ab<=50; ++ab){

        for (int abc = 1; abc<=26; ++abc)   {

            getline(myfile, line,',');

            if (line=="" && abc<=6){

                line = "NULL";

            }

            else if (line=="" && abc>6)  {

                line = "NULL";

                authorLine1 = line;

                authorLine2 = line;

                abc=27;

                getline(myfile, line);

            }

            if (abc==1) {

                article[ab-1].setIdentifier(line);

            }

            else if (abc==2) {

                forTitle = line;

                getline(myfile, line,'{');

                line = forTitle + line;

                article[ab-1].setTitle(line);

            }

            else if (abc==3) {

                article[ab-1].setJournal(line);

            }

            else if (abc==4) {

                article[ab-1].setMonth(line);

            }

            else if (abc==5) {

                article[ab-1].setYear(line);

            }

            else if (abc==6) {

                article[ab-1].setPublisher(line);

            }

            //  Replaced the condition: else if (abc==7 || abc==9 || abc==11 || abc==13 || abc==15 || abc==17 || abc==19 || abc==21 || abc==23 || abc==25)
            //  With the following one:

            else if ((abc>=7 && abc<=23) && (abc%2!=0)) {

                if (line!="NULL")   {
                    authorLine1 = line;
                    getline(myfile, line,',');
                    authorLine2 = line;
                    ++abc;
                }
                article[ab-1].addAuthor(authorLine1, authorLine2);
            }

            else if (abc==25)   {
                authorLine1 = line;
                std::string str;
                std::getline(myfile, str);
                authorLine2 = str;
                article[ab-1].addAuthor(authorLine1, authorLine2);
                abc=27;
            }
        }
    }

    int totalAuthors = countTotalAuthors(article);

    Author *auth = new Author[totalAuthors];

    linkedList* getAuthors = new linkedList();

    getAuthors = getAllAuthors(article);

    node* authorListTwo = getAuthors->first;

    int anotherCounter = 0;

    while (authorListTwo != NULL){

        auth[anotherCounter].name = authorListTwo->data;

        for(int xyz = 0; xyz<50; ++xyz){

            if (article[xyz].authorList->searching(authorListTwo->data))
            {
                ++auth[anotherCounter].countTotalArticles;
            }
        }

        ++anotherCounter;

        authorListTwo = authorListTwo->next;
    }

    int ch;

    cout<<"\n------------------DATA STRUCTURES PROJECT------------------\n\nWhich task would you like to run? Enter number!\n\n1. Calculate the total number of articles published by an author x.\n2. Calculates the number of publications of an author x per year\n3. Calculates the number of co-authors of an author x per publication sorted timewise.\n4. Counts the numbers of papers published by an author x for each author position.\n5. Sorted timewise, prints the name of the journal in which an author x has published his research work.\n\n------------------ADDITIONAL FUNCTIONS------------------\n\n6. View authors of each article.\n7. Search for an article by its identifier.\n8. Count total number of authors in all 50 publications.\n\n";

    cin>>ch;

    //closing the file as its work is done after everything is stored in objects and lists

    myfile.close();

    if (ch==1)  {

        int totalByAuthor = getNumberOfArticlesByAuthor(auth, totalAuthors);

        cout<<endl<<"Total no. of publications by the entered author = "<<totalByAuthor<<endl;

    } else if (ch == 2) {

        string s;

        cout<<"Please enter a string: "<<endl;

        cout<<s<<endl;

    } else if (ch == 3) {


    } else if (ch == 4) {


    } else if (ch == 5) {

    } else if (ch == 6) {

        viewAllAuthors(article);

    } else if (ch == 7) {

        string input;

        cout<<"Enter the identifier:";

        cin>>input;

        searchByIdentifier(article, input);

    } else if (ch == 8) {

        cout<<"Total number of authors in all fifty publications: "<<totalAuthors;

    }

    else {

    cout<<"Wrong choice entered! Terminating the program...";

    }

    return 0;
}
