https://scoutblockchain.com/wp-content/uploads/2019/04/ifyouwannateachme.txt

//Raja Zuberi

/* QuickSort

/* C implementation QuickSort */
#include<stdio.h> 
  
// A utility function to swap two elements 
void swap(int* a, int* b) 
{ 
    int t = *a; 
    *a = *b; 
    *b = t; 
} 
  
/* This function takes last element as pivot, places 
   the pivot element at its correct position in sorted 
    array, and places all smaller (smaller than pivot) 
   to left of pivot and all greater elements to right 
   of pivot */
int partition (int arr[], int low, int high) 
{ 
    int pivot = arr[high];    // pivot 
    int i = (low - 1);  // Index of smaller element 
  
    for (int j = low; j <= high- 1; j++) 
    { 
        // If current element is smaller than or 
        // equal to pivot 
        if (arr[j] <= pivot) 
        { 
            i++;    // increment index of smaller element 
            swap(&arr[i], &arr[j]); 
        } 
    } 
    swap(&arr[i + 1], &arr[high]); 
    return (i + 1); 
} 
  
/* The main function that implements QuickSort 
 arr[] --> Array to be sorted, 
  low  --> Starting index, 
  high  --> Ending index */
void quickSort(int arr[], int low, int high) 
{ 
    if (low < high) 
    { 
        /* pi is partitioning index, arr[p] is now 
           at right place */
        int pi = partition(arr, low, high); 
  
        // Separately sort elements before 
        // partition and after partition 
        quickSort(arr, low, pi - 1); 
        quickSort(arr, pi + 1, high); 
    } 
} 
  
/* Function to print an array */
void printArray(int arr[], int size) 
{ 
    int i; 
    for (i=0; i < size; i++) 
        printf("%d ", arr[i]); 
    printf("n"); 
} 
  
// Driver program to test above functions 
int main() 
{ 
    int arr[] = {10, 7, 8, 9, 1, 5}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    quickSort(arr, 0, n-1); 
    printf("Sorted array: n"); 
    printArray(arr, n); 
    return 0; 
}

*/

------------------------------------------------------------

/* MergeSort

#include<iostream>
using namespace std;
void swapping(int &a, int &b) {     //swap the content of a and b
   int temp;
   temp = a;
   a = b;
   b = temp;
}
void display(int *array, int size) {
   for(int i = 0; i<size; i++)
      cout << array[i] << " ";
   cout << endl;
}
void merge(int *array, int l, int m, int r) {
   int i, j, k, nl, nr;
   //size of left and right sub-arrays
   nl = m-l+1; nr = r-m;
   int larr[nl], rarr[nr];
   //fill left and right sub-arrays
   for(i = 0; i<nl; i++)
      larr[i] = array[l+i];
   for(j = 0; j<nr; j++)
      rarr[j] = array[m+1+j];
   i = 0; j = 0; k = l;
   //marge temp arrays to real array
   while(i < nl && j<nr) {
      if(larr[i] <= rarr[j]) {
         array[k] = larr[i];
         i++;
      }else{
         array[k] = rarr[j];
         j++;
      }
      k++;
   }
   while(i<nl) {       //extra element in left array
      array[k] = larr[i];
      i++; k++;
   }
   while(j<nr) {     //extra element in right array
      array[k] = rarr[j];
      j++; k++;
   }
}
void mergeSort(int *array, int l, int r) {
   int m;
   if(l < r) {
      int m = l+(r-l)/2;
      // Sort first and second arrays
      mergeSort(array, l, m);
      mergeSort(array, m+1, r);
      merge(array, l, m, r);
   }
}
int main() {
   int n;
   cout << "Enter the number of elements: ";
   cin >> n;
   int arr[n];     //create an array with given number of elements
   cout << "Enter elements:" << endl;
   for(int i = 0; i<n; i++) {
      cin >> arr[i];
   }
   cout << "Array before Sorting: ";
   display(arr, n);
   mergeSort(arr, 0, n-1);     //(n-1) for last index
   cout << "Array after Sorting: ";
   display(arr, n);
}

*/

------------------------------------------------------------

/*Selection Sort

// C program for implementation of selection sort 
#include <stdio.h> 
  
void swap(int *xp, int *yp) 
{ 
    int temp = *xp; 
    *xp = *yp; 
    *yp = temp; 
} 
  
void selectionSort(int arr[], int n) 
{ 
    int i, j, min_idx; 
  
    // One by one move boundary of unsorted subarray 
    for (i = 0; i < n-1; i++) 
    { 
        // Find the minimum element in unsorted array 
        min_idx = i; 
        for (j = i+1; j < n; j++) 
          if (arr[j] < arr[min_idx]) 
            min_idx = j; 
  
        // Swap the found minimum element with the first element 
        swap(&arr[min_idx], &arr[i]); 
    } 
} 
  
/* Function to print an array */
void printArray(int arr[], int size) 
{ 
    int i; 
    for (i=0; i < size; i++) 
        printf("%d ", arr[i]); 
    printf("\n"); 
} 
  
// Driver program to test above functions 
int main() 
{ 
    int arr[] = {64, 25, 12, 22, 11}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    selectionSort(arr, n); 
    printf("Sorted array: \n"); 
    printArray(arr, n); 
    return 0; 
}

*/

------------------------------------------------------------

/*Bubble Sort

// Optimized implementation of Bubble sort 
#include <stdio.h> 
  
void swap(int *xp, int *yp) 
{ 
    int temp = *xp; 
    *xp = *yp; 
    *yp = temp; 
} 
  
// An optimized version of Bubble Sort 
void bubbleSort(int arr[], int n) 
{ 
   int i, j; 
   bool swapped; 
   for (i = 0; i < n-1; i++) 
   { 
     swapped = false; 
     for (j = 0; j < n-i-1; j++) 
     { 
        if (arr[j] > arr[j+1]) 
        { 
           swap(&arr[j], &arr[j+1]); 
           swapped = true; 
        } 
     } 
  
     // IF no two elements were swapped by inner loop, then break 
     if (swapped == false) 
        break; 
   } 
} 
  
/* Function to print an array */
void printArray(int arr[], int size) 
{ 
    int i; 
    for (i=0; i < size; i++) 
        printf("%d ", arr[i]); 
    printf("n"); 
} 
  
// Driver program to test above functions 
int main() 
{ 
    int arr[] = {64, 34, 25, 12, 22, 11, 90}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    bubbleSort(arr, n); 
    printf("Sorted array: \n"); 
    printArray(arr, n); 
    return 0; 
}

*/

------------------------------------------------------------

/*Solution of hometask

#include <iostream>
#include <cstring>
using  namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

class node2{
	public:
		 char data;
		 node2 *next;
		 node2 *prev;
};
class Doubly{
 public:	
	node2 *first;
	node2 *last;
 bool isEmpty(){
 	return first==NULL;
 }
 void AddNode(char d){
 	node2 *nn=new node2();
 	nn->data=d;
 if(isEmpty()){
 	first=nn;
 	last=nn;
 }
 else{
 	last->next=nn;
 	nn->prev=last;
 	last=nn;
 }	
 }
void print(){
	node2 *temp=first;
	while(temp!=NULL){
	  cout<<temp->data;
	if(temp->next!=NULL){
		cout<<"-><-";
	}
	temp=temp->next;	
	}
}
bool palindrome(node2 *temp1, node2 *temp2){
	//First base case
	char data1=tolower(temp1->data);
	char data2=tolower(temp2->data);
	if(data1!=data2){
	   return false;
	
	}
	//Second Base Case
	else if (temp1==temp2 || temp1==last){
		return true;
	}
	else{
		return palindrome(temp1->next, temp2->prev);
	}
}	
	
};

class Node{
	public:
		int data;
		Node *next;
		
};
class LinkedList{
	public:
		Node *first;
		Node *last;
	
	bool isEmpty(){
		return first==NULL;
	}
	
	void AddFront(char d){
		Node *nn=new Node();
		nn->data=d;
	  if(isEmpty()){
	  	first=nn;
	  	last=nn;
	  }
	  else{
	  	last->next=nn;
	  	last=nn;
	  }
		
	}
  void ReArrange(Node *temp, Node *even){
    
    //Base case for even number of nodes.
  	if(temp->next==NULL || even->next==NULL){
  	   temp->next=even;
		return;
	  }
     Node *nexteven=(even->next)->next;
	 temp->next=(temp->next)->next;
	 even->next=nexteven;
	 //Base case for odd number of node
	 if(nexteven==NULL){
	 	temp=temp->next;
	 	temp->next=even;
	    return;	
	 }
	 
     ReArrange(temp->next, nexteven);
	 nexteven->next=even;
	 even->next=NULL;
	 }
	 	
	  
  	
	
	void reverse(Node *temp, Node *prev){
		// Base Case
		if(temp==NULL){
			return;
		}
		else{
			
			
			reverse(temp->next, temp);
            if(temp==last){
            	
            	first=last;
			}			
			temp->next=prev;
			last=temp;
		}
	}
	
	void print(){
		Node *temp=first;
		
		while(temp!=NULL){
			cout<<temp->data;
			if(temp->next!=NULL){
				cout<<"->";
			}
			temp=temp->next;
		}
	}
	int fib(int n){
		//Base case
		
		if(n==0){
			return 0;
		}
		else if(n==1){
			return 1;
		}
		
		else{
		
			return fib(n-1)+fib(n-2);
		    }
	}
	int sum_array(int array[], int index,int sum){
	    
	   sum=sum+array[index];
	    
	   if(index > (sizeof(array)/sizeof(int))+1){
	   	   
   	   	   return sum;
	   }
	  else{   
	          
	  	sum_array(array, ++index, sum);
	  	      
	  	    
	  } 
	}
		
};

int search_array(int array[], int index, int value, int total_size){
	  

	 //Base condition 1
	 if(array[index]==value){
	 	
	 	return index;
	 }
	// Base Condition  2
	
	else if(index==total_size){
		
		return -1;
	}
	else{
		search_array(array, ++index, value,8);
	}
	
}
int factorial(int num){
	
	//base condition
	if(num==1){
		return 1;
	}
	else{
		return num*factorial(num-1);
	}
}
int power(int num, int pow){
	
	if(pow==0){
		return 1;
	}
	else{
		return num*power(num, pow-1);
	}
}
int main(int argc, char** argv) {
	int initial;
	cout<<"Select below Options(input 1 or 2): "<<endl;
	cout<<"1) Assignment 2 Only"<<endl;
	cout<<"2) Assignment 2 + Lab Task"<<endl;
	cin>>initial;
	if(initial==2){
	
	 int value;
	 int array_value[]={1,34,45,97,56,12,7,8};
	
	 cout<<"Given Array is:[";
	 for(int i=0;i<(sizeof(array_value))/sizeof(int); i++){
		cout<<array_value[i]<<",";
	  }
	 cout<<"]"<<endl;
	 int value_search;
	 cout<<"Enter the value to search in the array recursively: ";
	 cin>> value_search;
	 if(search_array(array_value, 0, value_search, 8)==-1){
		cout<<"Value is not present in the array"<<endl;
		
	  }
	 else{
		cout<<"The valus is present on index: "<<search_array(array_value, 0, value_search,8)<<endl;
	  }
     int fact;		
	 cout<<"Calculate the factorial using recursion: "<<endl;
	 cout<<"Input Number: ";
	 cin>> fact;
	 cout<<"The factorial is: ";
	 cout<<factorial(fact)<<endl;
	
     int num,pow;
     cout<<"Calulate the power of a number using recursion."<<endl;
     cout<<"Input number:"<<endl;
     cin>>num;
     cout<<"Input power:"<<endl;
     cin>>pow;
     cout<<"Answer is: "<<power(num, pow); 



	LinkedList *l=new LinkedList();
	int fib;
	cout<<"\nHow many fibonacci numbers do you want to print?"<<endl;
	cin>>fib;
	
	for(int i=0;i<=fib;i++){
		cout<<l->fib(i)<<",";
	}
	int array_input;
	int array[5];
	cout<<"\n\nInput the 5 elements for array:(one value each and press enter) "<<endl;
	for(int i=0; i<5;i++){
	   cin>>array_input;
	   array[i]=array_input;
	}
	cout<<"Using recursion, the sum of all the elements of array is: ";
	cout<<l->sum_array(array, 0,0);  
	delete l;
}
else if(initial==1){

	int input;
	cout<<"\n\n\t\t\tAssignment 2"<<endl;
	cout<<"\nQuestion 1: Write a recursive function which reverses a linear linked list:"<<endl;
	cout<<"Enter the number nodes to be inserted: "<<endl;
    LinkedList *l2=new LinkedList();		
	cin>>input;
	int data;
     cout<<"\nEnter the data to be inserted in each node:(One by one and press enter) "<<endl;
	while(input!=0){
		cin>>data;
		l2->AddFront(data);
		input--;
	}
	cout<<"\nList Successfully made!"<<endl;
	cout<<"List: ";
	l2->print();
	
	cout<<"\nNow Reversing...\n";
	l2->reverse(l2->first,NULL);
	cout<<"Reversed Linked List: ";
    
	l2->print();
	l2->reverse(l2->first,NULL); 

	cout<<"\n\nQuestion 2: Write a function which re-arranges a linked list by separating the even position and odd position nodes;\n The even position node should be put at the end of the list in reverse order"<<endl; 	
    l2->ReArrange(l2->first, l2->first->next);
    l2->print();
    cout<<"\n\nQuestion 3: Write a recursive function which checks whether a given doubly linked list is palindrome or not?"<<endl;
    string stri;
	cout<<"\nEnter a string: ";
	cin>>stri;
    Doubly *d=new Doubly();
    int n=stri.length();
    char char_array[n+1];
    strcpy(char_array, stri.c_str());
    
    for(int i=0;i<n;i++){
    	
		d->AddNode(char_array[i]);
    	
	}
	if(d->palindrome(d->first, d->last)){
		cout<<"\nThe String is a Palindrome"<<endl;
	}
	else{
		cout<<"\nThe String is not a Palindrome"<<endl;
	}
}
else{
	cout<<"You've selected the wrong option. Please input 1 or 2. Run the program again";
}
	return 0;
}

*/

------------------------------------------------------------

/*JAVA getPage

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
public class Uni {

    public static void main(String[] args) throws IOException {

        // Make a URL to the web page
        URL url = new URL("https://bico.media/1156e36bc4b4ff8495a4e918e48e36416919ce3baf372d1aa72700996849cd94");

        // Get the input stream through URL Connection
        URLConnection con = url.openConnection();
        InputStream is =con.getInputStream();

        // Once you have the Input Stream, it's just plain old Java IO stuff.

        // For this case, since you are interested in getting plain-text web page
        // I'll use a reader and output the text content to System.out.

        // For binary content, it's better to directly read the bytes from stream and write
        // to the target file.
        BufferedReader br = new BufferedReader(new InputStreamReader(is));

        String line = null;

        // read each line and write to System.out
        while ((line = br.readLine()) != null) {
            System.out.println(line);
        }
    }
}

*/

------------------------------------------------------------

/*Circular Queue using array

#include <iostream>
using namespace std;

int cqueue[5];
int front = -1, rear = -1, n=5;

void insertCQ(int val) {
   if ((front == 0 && rear == n-1) || (front == rear+1)) {
      cout<<"Queue Overflow \n";
      return;
   }
   if (front == -1) {
      front = 0;
      rear = 0;
   } else {
      if (rear == n - 1)
      rear = 0;
      else
      rear = rear + 1;
   }
   cqueue[rear] = val ;
}
void deleteCQ() {
   if (front == -1) {
      cout<<"Queue Underflow\n";
      return ;
   }
   cout<<"Element deleted from queue is : "<<cqueue[front]<<endl;
   
   if (front == rear) {
      front = -1;
      rear = -1;
   } else {
      if (front == n - 1)
      front = 0;
      else
      front = front + 1;
   }
}
void displayCQ() {
   int f = front, r = rear;
   if (front == -1) {
      cout<<"Queue is empty"<<endl;
      return;
   }
   cout<<"Queue elements are :\n";
   if (f <= r) {
      while (f <= r){
         cout<<cqueue[f]<<" ";
         f++;
      }
   } else {
      while (f <= n - 1) {
         cout<<cqueue[f]<<" ";
         f++;
      }
      f = 0;
      while (f <= r) {
         cout<<cqueue[f]<<" ";
         f++;
      }
   }
   cout<<endl;
}
int main() {
   
   int ch, val;
   cout<<"1)Insert\n";
   cout<<"2)Delete\n";
   cout<<"3)Display\n";
   cout<<"4)Exit\n";
do {
   cout<<"Enter choice : "<<endl;
   cin>>ch;
   switch(ch) {
      case 1: 
         cout<<"Input for insertion: "<<endl;
         cin>>val;
         insertCQ(val);
         break;
         
      case 2: 
         deleteCQ();
         break;
         
      case 3: 
         displayCQ();
         break;
         
      case 4: 
         cout<<"Exit\n";
         break;
         default: cout<<"Incorrect!\n";
   }
} while(ch != 4);
   return 0;
}

*/

------------------------------------------------------------

/*Queue using array

#include <iostream>
using namespace std;
int queue[100], n = 100, front = - 1, rear = - 1;
void Insert() {
   int val;
   if (rear == n - 1)
      cout<<"Queue Overflow"<<endl;
   else {
      if (front == - 1)
      front = 0;
      cout<<"Insert the element in queue : "<<endl;
      cin>>val;
      rear++;
      queue[rear] = val;
   }
}
void Delete() {
   if (front == - 1 || front > rear) {
      cout<<"Queue Underflow ";
   return ;
   } else {
      cout<<"Element deleted from queue is : "<< queue[front] <<endl;
      front++;;
   }
}
void Display() {
   if (front == - 1)
   cout<<"Queue is empty"<<endl;
   else {
      cout<<"Queue elements are : ";
      for (int i = front; i <= rear; i++)
         cout<<queue[i]<<" ";
      cout<<endl;
   }
}
int main() {
   int ch;
   cout<<"1) Insert element to queue"<<endl;
   cout<<"2) Delete element from queue"<<endl;
   cout<<"3) Display all the elements of queue"<<endl;
   cout<<"4) Exit"<<endl;
do {
   cout<<"Enter your choice : "<<endl;
   cin<<ch;
   switch (ch) {
      case 1: Insert();
         break;
      case 2: Delete();
         break;
      case 3: Display();
         break;
      case 4: cout<<"Exit"<<endl;
         break;
      default: cout<<"Invalid choice"<<endl;
   }
} while(ch!=4);
   return 0;
}

*/

------------------------------------------------------------

/*Queue using linked list

#include <iostream>

using namespace std;

class node {
public:
   int data;
   node* next;
};

class que {

public:
node* front;
node* rear;
node* temp;

void Insert() {
   int val;
   cout<<"Insert the element in queue : "<<endl;
   cin>>val;
   if (rear == NULL) {
      rear->next = NULL;
      rear->data = val;
      front = rear;
   } else {
      rear->next = temp;
      temp->data = val;
      temp->next = NULL;
      rear = temp;
   }
}

void Delete() {
   temp = front;
   if (front == NULL) {
      cout<<"Underflow"<<endl;
      return;
   }
   else
   if (temp->next != NULL) {
      temp = temp->next;
      cout<<"Element deleted from queue is : "<<front->data<<endl;
      free(front);
      front = temp;
   } else {
      cout<<"Element deleted from queue is : "<<front->data<<endl;
      free(front);
      front = NULL;
      rear = NULL;
   }
}
void Display() {
   temp = front;
   if ((front == NULL) && (rear == NULL)) {
      cout<<"Queue is empty"<<endl;
      return;
   }
   cout<<"Queue elements are: ";
   while (temp != NULL) {
      cout<<temp->data<<" ";
      temp = temp->next;
   }
   cout<<endl;
}
};

int main() {
   int ch;
   que* q = new que();
   cout<<"1) Insert element to queue"<<endl;
   cout<<"2) Delete element from queue"<<endl;
   cout<<"3) Display all the elements of queue"<<endl;
   cout<<"4) Exit"<<endl;
do {
   cout<<"Enter your choice : "<<endl;
   cin>>ch;
   switch (ch) {
      case 1: q->Insert();
         break;
      case 2: q->Delete();
         break;
      case 3: q->Display();
         break;
      case 4: cout<<"Exit"<<endl;
         break;
      default: cout<<"Invalid choice"<<endl;
   }
} while(ch!=4);
   return 0;
}

*/

------------------------------------------------------------
